/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/**
 * Copyright (c) 2011-2015  Regents of the University of California.
 *
 * This file is part of ndnSIM. See AUTHORS for complete list of ndnSIM authors and
 * contributors.
 *
 * ndnSIM is free software: you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * ndnSIM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ndnSIM, e.g., in COPYING.md file.  If not, see <http://www.gnu.org/licenses/>.
 **/

// EdgeComputer.cpp

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/ndnSIM-module.h"

namespace ns3 {

NS_LOG_COMPONENT_DEFINE ("EdgeComputer");

int
main(int argc, char* argv[])
{
//变量  
  std::string CachePolicy = "0000";
  std::string RoutePolicy = "best-route"; 
  std::string FIBPolicy = "best-route";

//  std::string TraceFile = "0000-0-0";
  
  std::string CacheNameOrder = "0000";
  std::string RouteNameOrder = "0";
  std::string FIBNameOrder = "0";

  CommandLine cmd;
  cmd.AddValue("CachePolicy","Set cache policy? (Default:Lru)",CachePolicy);
  cmd.AddValue("RoutePolicy","Set route polocy? (Default:best-route)",RoutePolicy);
  cmd.AddValue("FIBPolicy","Set FIB fulling polocy? (Default:best-route)",FIBPolicy);
//  cmd.AddValue("TraceFile","Set name of TraceFile? (Default:0000-0-0)",TraceFile);
  cmd.Parse(argc,argv);

  AnnotatedTopologyReader topologyReader("", 1);
  topologyReader.SetFileName("ndnsim/topologies/EdgeComputer-1.0.txt");
  topologyReader.Read();

  NodeContainer L0;
  L0.Add(Names::Find<Node>("c1"));
  
  NodeContainer L1;
  L1.Add(Names::Find<Node>("g1"));
  
  NodeContainer L2;
  L2.Add(Names::Find<Node>("s1"));
  L2.Add(Names::Find<Node>("s2"));
  
  NodeContainer L3;
  L3.Add(Names::Find<Node>("s3"));
  L3.Add(Names::Find<Node>("s4"));
  L3.Add(Names::Find<Node>("s5"));
  L3.Add(Names::Find<Node>("s6"));
  
  NodeContainer L4;
  L4.Add(Names::Find<Node>("d1"));
  L4.Add(Names::Find<Node>("d2"));
  L4.Add(Names::Find<Node>("d3"));
  L4.Add(Names::Find<Node>("d4"));
  L4.Add(Names::Find<Node>("d5"));
  L4.Add(Names::Find<Node>("d6"));
  L4.Add(Names::Find<Node>("d7"));
  L4.Add(Names::Find<Node>("d8"));
  L4.Add(Names::Find<Node>("r1"));
  L4.Add(Names::Find<Node>("r2"));
  L4.Add(Names::Find<Node>("r3"));
  L4.Add(Names::Find<Node>("r4"));

  NodeContainer L5;
  L5.Add(Names::Find<Node>("u1"));
  L5.Add(Names::Find<Node>("u2"));
  L5.Add(Names::Find<Node>("u3"));
  L5.Add(Names::Find<Node>("u4"));
  L5.Add(Names::Find<Node>("u5"));
  L5.Add(Names::Find<Node>("u6"));
  L5.Add(Names::Find<Node>("u7"));
  L5.Add(Names::Find<Node>("u8"));
  L5.Add(Names::Find<Node>("u9"));
  L5.Add(Names::Find<Node>("u10"));
  L5.Add(Names::Find<Node>("u11"));
  L5.Add(Names::Find<Node>("u12"));

  // 安装 NDN 协议栈
  ndn::StackHelper ndnHelper;
  ndnHelper.SetOldContentStore("ns3::ndn::cs::Nocache");
  ndnHelper.Install(L0);
  ndnHelper.SetOldContentStore("ns3::ndn::cs::Fifo");
  ndnHelper.Install(L5);

    // 简单替换
for (int i = 0; i < 4; i++){

  if (CachePolicy[i] == '0'){
     ndnHelper.SetOldContentStore("ns3::ndn::cs::Nocache");
     CacheNameOrder[i] = '0';
  }
  else if (CachePolicy[i] == '1'){
     ndnHelper.SetOldContentStore("ns3::ndn::cs::Lru");
     CacheNameOrder[i] = '1';
  }
  else if (CachePolicy[i] == '2'){
     ndnHelper.SetOldContentStore("ns3::ndn::cs::Fifo");
     CacheNameOrder[i] = '2';
  }
  else if (CachePolicy[i] == '3'){
     ndnHelper.SetOldContentStore("ns3::ndn::cs::Lfu");
     CacheNameOrder[i] = '3';
  }
  else if (CachePolicy[i] == '4'){
     ndnHelper.SetOldContentStore("ns3::ndn::cs::Random");
     CacheNameOrder[i] = '4';
  }
    else{
     NS_LOG_UNCOND ("Error in CachePolicy !");   
  }


  if (i == 0)
     ndnHelper.Install(L1);
  else if (i == 1)
    ndnHelper.Install(L2);
  else if (i == 2)
    ndnHelper.Install(L3);
  else if (i == 3)
    ndnHelper.Install(L4);


    // 生存时间
//  ndnHelper.SetOldContentStore("ns3::ndn::cs::Stats::Lru");
//  ndnHelper.SetOldContentStore("ns3::ndn::cs::Stats::Fifo");
//  ndnHelper.SetOldContentStore("ns3::ndn::cs::Stats::Lfu");
//  ndnHelper.SetOldContentStore("ns3::ndn::cs::Stats::Random");
    
    // 新鲜度
//  ndnHelper.SetOldContentStore("ns3::ndn::cs::Freshness::Lru");
//  ndnHelper.SetOldContentStore("ns3::ndn::cs::Freshness::Fifo");
//  ndnHelper.SetOldContentStore("ns3::ndn::cs::Freshness::Lfu");
//  ndnHelper.SetOldContentStore("ns3::ndn::cs::Freshness::Random");
    
    // 概率性
//  ndnHelper.SetOldContentStore("ns3::ndn::cs::Probability::Lru");
//  ndnHelper.SetOldContentStore("ns3::ndn::cs::Probability::Fifo");
//  ndnHelper.SetOldContentStore("ns3::ndn::cs::Probability::Lfu");
//  ndnHelper.SetOldContentStore("ns3::ndn::cs::Probability::Random");

//  ndnHelper.InstallAll();

}

    
  // 设置 CS 内容存储库的容量，
    // 云中心
//  Config::Set("/NodeList/0/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1000));
  
    // 网关
if (CacheNameOrder[0] != '0'){
  Config::Set("/NodeList/1/$ns3::ndn::ContentStore/MaxSize", UintegerValue(200));
}  
    // 出口交换器 
if (CacheNameOrder[1] != '0'){
  Config::Set("/NodeList/2/$ns3::ndn::ContentStore/MaxSize", UintegerValue(150));
  Config::Set("/NodeList/3/$ns3::ndn::ContentStore/MaxSize", UintegerValue(150));
}
    // 核心交换器
if (CacheNameOrder[2] != '0'){
  Config::Set("/NodeList/4/$ns3::ndn::ContentStore/MaxSize", UintegerValue(100));
  Config::Set("/NodeList/5/$ns3::ndn::ContentStore/MaxSize", UintegerValue(100));
  Config::Set("/NodeList/6/$ns3::ndn::ContentStore/MaxSize", UintegerValue(100));
  Config::Set("/NodeList/7/$ns3::ndn::ContentStore/MaxSize", UintegerValue(100));
}  
    // 路由器 + 边缘设备
if (CacheNameOrder[3] != '0'){
  Config::Set("/NodeList/8/$ns3::ndn::ContentStore/MaxSize", UintegerValue(50));
  Config::Set("/NodeList/9/$ns3::ndn::ContentStore/MaxSize", UintegerValue(50));
  Config::Set("/NodeList/10/$ns3::ndn::ContentStore/MaxSize", UintegerValue(50));
  Config::Set("/NodeList/11/$ns3::ndn::ContentStore/MaxSize", UintegerValue(50));
  Config::Set("/NodeList/12/$ns3::ndn::ContentStore/MaxSize", UintegerValue(50));
  Config::Set("/NodeList/13/$ns3::ndn::ContentStore/MaxSize", UintegerValue(50));
  Config::Set("/NodeList/14/$ns3::ndn::ContentStore/MaxSize", UintegerValue(50));
  Config::Set("/NodeList/15/$ns3::ndn::ContentStore/MaxSize", UintegerValue(50));
  Config::Set("/NodeList/16/$ns3::ndn::ContentStore/MaxSize", UintegerValue(50));
  Config::Set("/NodeList/17/$ns3::ndn::ContentStore/MaxSize", UintegerValue(50));
  Config::Set("/NodeList/18/$ns3::ndn::ContentStore/MaxSize", UintegerValue(50));
  Config::Set("/NodeList/19/$ns3::ndn::ContentStore/MaxSize", UintegerValue(50));
}
    // 用户
  Config::Set("/NodeList/20/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/21/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/22/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/23/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/24/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/25/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/26/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/27/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/28/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/29/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/30/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/31/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));

  // 设置路由策略为 最佳路径
  if (RoutePolicy == "best-route"){
    ndn::StrategyChoiceHelper::InstallAll("/", "/localhost/nfd/strategy/best-route");
    RouteNameOrder = "1";
  }
  else if (RoutePolicy == "multicast"){
    ndn::StrategyChoiceHelper::InstallAll("/", "/localhost/nfd/strategy/multicast");
    RouteNameOrder = "2";
  }
  else if (RoutePolicy == "ncc"){
    ndn::StrategyChoiceHelper::InstallAll("/", "/localhost/nfd/strategy/ncc");
    RouteNameOrder = "3";
  }
  else if (RoutePolicy == "client-control"){
    ndn::StrategyChoiceHelper::InstallAll("/", "/localhost/nfd/strategy/client-control");
    RouteNameOrder = "4";
  }
  else{
      NS_LOG_UNCOND ("Error in RoutePolicy");
  }

  // 在所有节点上安装路由接口
  ndn::GlobalRoutingHelper ndnGlobalRoutingHelper;
  ndnGlobalRoutingHelper.InstallAll();

  // 获得消费者/生产者容器
  Ptr<Node> producer = Names::Find<Node>("c1");
  NodeContainer consumerNodes;
  consumerNodes.Add(Names::Find<Node>("u1"));
  consumerNodes.Add(Names::Find<Node>("u2"));
  consumerNodes.Add(Names::Find<Node>("u3"));
  consumerNodes.Add(Names::Find<Node>("u4"));
  consumerNodes.Add(Names::Find<Node>("u5"));
  consumerNodes.Add(Names::Find<Node>("u6"));
  consumerNodes.Add(Names::Find<Node>("u7"));
  consumerNodes.Add(Names::Find<Node>("u8"));
  consumerNodes.Add(Names::Find<Node>("u9"));
  consumerNodes.Add(Names::Find<Node>("u10"));
  consumerNodes.Add(Names::Find<Node>("u11"));
  consumerNodes.Add(Names::Find<Node>("u12"));
  consumerNodes.Add(Names::Find<Node>("d1"));
  consumerNodes.Add(Names::Find<Node>("d2"));
  consumerNodes.Add(Names::Find<Node>("d3"));
  consumerNodes.Add(Names::Find<Node>("d4"));
  consumerNodes.Add(Names::Find<Node>("d5"));
  consumerNodes.Add(Names::Find<Node>("d6"));
  consumerNodes.Add(Names::Find<Node>("d7"));
  consumerNodes.Add(Names::Find<Node>("d8"));

  // 安装 NDN 应用 - 消费者
  std::string prefix = "/prefix";                                       // 前缀
//  ndn::AppHelper consumerHelper("ns3::ndn::ConsumerCbr");
//  ndn::AppHelper consumerHelper("ns3::ndn::ConsumerBatches");
//  ndn::AppHelper consumerHelper("ns3::ndn::ConsumerWindow");
//  ndn::AppHelper consumerHelper("ns3::ndn::ConsumerPcon");
  ndn::AppHelper consumerHelper("ns3::ndn::ConsumerZipfMandelbrot");    // Zipf 分布的兴趣包请求，默认100种类型的内容请求
  consumerHelper.SetPrefix(prefix);                                     // 设置兴趣包前缀
  consumerHelper.SetAttribute("Frequency", StringValue("50"));          // 设置兴趣包请求频率
  consumerHelper.SetAttribute("NumberOfContents", StringValue("100"));  // 设置兴趣包种类
  //consumerHelper.SetAttribute ("Randomize", StringValue ("uniform")); // 设置随机属性
  consumerHelper.Install(consumerNodes);

  // 安装 NDN 应用 - 生产者
  ndn::AppHelper producerHelper("ns3::ndn::Producer");
  producerHelper.SetPrefix(prefix);
  producerHelper.SetAttribute("PayloadSize", StringValue("1024"));
  producerHelper.Install(producer);

  // 添加生成源前缀到全局路由
  ndnGlobalRoutingHelper.AddOrigins(prefix, producer);

  // 计算全局路由，填充 FIB 表
  if (FIBPolicy == "best-route"){
     ndn::GlobalRoutingHelper::CalculateRoutes();
     FIBNameOrder = "1";
  }
  else if (FIBPolicy == "Lfid"){
     ndn::GlobalRoutingHelper::CalculateLfidRoutes();
     FIBNameOrder = "2";
  }
  else if (FIBPolicy == "All"){
     ndn::GlobalRoutingHelper::CalculateAllPossibleRoutes();
     FIBNameOrder = "3";
  }
  else{
     NS_LOG_UNCOND ("Error in FIB Polocy !"); 
  }

  // Trace 文件
  std::string TraceFile = CacheNameOrder + '-' + RouteNameOrder + '-' + FIBNameOrder;
  ndn::AppDelayTracer::InstallAll(TraceFile + "-Packet-delays-trace.txt");
  ndn::CsTracer::InstallAll(TraceFile + "-Cache-hit-trace.txt");
  ndn::L3RateTracer::InstallAll(TraceFile + "-Traffic-trace.txt");
  L2RateTracer::InstallAll(TraceFile + "-Drop-trace.txt");

  // 设置实验时长
  Simulator::Stop(Seconds(100.0));
  Simulator::Run();
  Simulator::Destroy();

  return 0;
}

} // namespace ns3

int
main(int argc, char* argv[])
{
  return ns3::main(argc, argv);
}
