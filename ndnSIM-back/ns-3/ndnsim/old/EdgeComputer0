/* -*- Mode:C++; c-file-style:"gnu"; indent-tabs-mode:nil; -*- */
/**
 * Copyright (c) 2011-2015  Regents of the University of California.
 *
 * This file is part of ndnSIM. See AUTHORS for complete list of ndnSIM authors and
 * contributors.
 *
 * ndnSIM is free software: you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * ndnSIM is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * ndnSIM, e.g., in COPYING.md file.  If not, see <http://www.gnu.org/licenses/>.
 **/

// EdgeComputer.cpp

#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/ndnSIM-module.h"

namespace ns3 {

/**
 *
 *                         c01
 *                          |
 *                          |
 *                          |
 *                          |
 *                          |
 * e01 - e02 - e03 - e04 - e05 - e06 - e07 - e08 - e09
 *  |     |     |     |     |     |     |     |     |
 * e10 - e11 - e12 - e13 - e14 - e15 - e16 - e17 - e18
 *  |     |     |     |     |     |     |     |     |
 * e19 - e20 - e21 - e22 - e23 - e24 - e25 - e26 - e27
 *  |     |     |     |     |     |     |     |     |
 * e28 - e29 - e30 - e31 - e32 - e33 - e34 - e35 - e36
 *  |     |     |     |     |     |     |     |     |
 * e37 - e38 - e39 - e40 - e41 - e42 - e43 - e44 - e45
 *  |     |     |     |     |     |     |     |     |
 * e46 - e47 - e48 - e49 - e50 - e51 - e52 - e53 - e54
 *  :           :           :           :           :
 *  :           :           :           :           :
 * u01         u02         u03         u04         u05
 *
 */

int
main(int argc, char* argv[])
{
  CommandLine cmd;
  cmd.Parse(argc, argv);

  AnnotatedTopologyReader topologyReader("", 1);
  topologyReader.SetFileName("ndnsim/topologies/EdgeComputer.txt");
  topologyReader.Read();

  // 安装 NDN 协议栈
  ndn::StackHelper ndnHelper;
  ndnHelper.SetOldContentStore("ns3::ndn::cs::Lru");
  //ndnHelper.SetOldContentStore("ns3::ndn::cs::Lfu");
  //ndnHelper.SetOldContentStore("ns3::ndn::cs::Fifo");
  //ndnHelper.SetOldContentStore("ns3::ndn::cs::Random");
  //ndnHelper.SetOldContentStore("ns3::ndn::cs::Nocaache");
  ndnHelper.InstallAll();

  // 设置 CS 内容存储库的容量，
  Config::Set("/NodeList/*/$ns3::ndn::ContentStore/MaxSize", UintegerValue(10));  //边缘节点存储容量为 10
  Config::Set("/NodeList/0/$ns3::ndn::ContentStore/MaxSize", UintegerValue(100)); //发布节点存储容量为 100
  Config::Set("/NodeList/55/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));  //请求节点存储容量为 1
  Config::Set("/NodeList/56/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/57/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/58/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));
  Config::Set("/NodeList/59/$ns3::ndn::ContentStore/MaxSize", UintegerValue(1));

  // 设置路由策略为 最佳路径
  ndn::StrategyChoiceHelper::InstallAll("/", "/localhost/nfd/strategy/multicast");

  // 在所有节点上安装路由接口
  ndn::GlobalRoutingHelper ndnGlobalRoutingHelper;
  ndnGlobalRoutingHelper.InstallAll();

  // 获得消费者/生产者容器
  Ptr<Node> producer = Names::Find<Node>("c1");
  NodeContainer consumerNodes;
  consumerNodes.Add(Names::Find<Node>("u1"));
  consumerNodes.Add(Names::Find<Node>("u2"));
  consumerNodes.Add(Names::Find<Node>("u3"));
  consumerNodes.Add(Names::Find<Node>("u4"));
  consumerNodes.Add(Names::Find<Node>("u5"));

  // 安装 NDN 应用 - 消费者
  std::string prefix = "/prefix";                                       // 前缀
  //ndn::AppHelper consumerHelper("ns3::ndn::ConsumerCbr");
  ndn::AppHelper consumerHelper("ns3::ndn::ConsumerZipfMandelbrot");    // Zipf 分布的兴趣包请求，默认100种类型的内容请求
  consumerHelper.SetPrefix(prefix);                                     // 设置兴趣包前缀
  consumerHelper.SetAttribute("Frequency", StringValue("10"));          // 设置兴趣包请求频率
  consumerHelper.SetAttribute("NumberOfContents", StringValue("100"));  // 设置兴趣包种类
  //consumerHelper.SetAttribute ("Randomize", StringValue ("uniform")); // 设置随机属性
  consumerHelper.Install(consumerNodes);

  // 安装 NDN 应用 - 生产者
  ndn::AppHelper producerHelper("ns3::ndn::Producer");
  producerHelper.SetPrefix(prefix);
  producerHelper.SetAttribute("PayloadSize", StringValue("1024"));
  producerHelper.Install(producer);

  // 添加生成源前缀到全局路由
  ndnGlobalRoutingHelper.AddOrigins(prefix, producer);

  // 计算全局路由，填充 FIB 表
  ndn::GlobalRoutingHelper::CalculateRoutes();

  ndn::AppDelayTracer::InstallAll("EdgeComputer-delays-trace.txt");
  ndn::CsTracer::InstallAll("EdgeComputer-cs-trace.txt");
  L2RateTracer::InstallAll("EdgeComputer-drop-trace.txt");

  // 设置实验时长
  Simulator::Stop(Seconds(100.0));
  Simulator::Run();
  Simulator::Destroy();

  return 0;
}

} // namespace ns3

int
main(int argc, char* argv[])
{
  return ns3::main(argc, argv);
}
